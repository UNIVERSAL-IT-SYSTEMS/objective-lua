require 'olua'

module("olua.lib", package.seeall)

--- The Proxy class forwards on all unhandled messages to a different object
--- and returns the result. The proxy target may be changed dynamically at
--- run time.
---
--- It is useful for particular constructions where you want one object to
--- act like another object based on runtime considerations. For example,
--- consider a button in a web application: a text-only button may be
--- implemented as a simple HTML button, while a button with an image may have
--- to be implemented as a complex DHTML object. Proxy would allow you to
--- create a generic FlexibleButton class that can examine its parameters at
--- run time and then *become* either an HTMLButton or a ImageButton.

@implementation Proxy : Object
	@statics
		local target
	@end

	--- Initialises the proxy to point at the given target.
		
	- initWithTarget: newtarget do
		target = newtarget
		return [super init]
	end

	--- Returns the proxy's current target.
	
	- proxyTarget do
		return target
	end
	
	--- Changes the proxy's current target.
	
	- setProxyTarget: newtarget do
		target = newtarget
	end
	
	--- Returns an identifier string describing this proxy.
	
	- toString do
		return "[Proxy@"..[self hash]..[target toString]"..]"
	end
	
	--- 	
	- respondsToSelector: selector do
		return [target respondsToSelector: selector]
	end
	
	- isProxy do
		return true
	end
	
	- performSelector: selector withArgs: args do
		return [target performSelector: selector withArgs: args]
	end
	
	- forwardInvocation: message do
		return [message invokeWithTarget: target]
	end
@end
