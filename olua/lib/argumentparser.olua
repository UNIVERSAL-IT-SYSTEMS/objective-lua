require 'olua'

module("olua.lib", package.seeall)

@implementation ArgumentParser : Object
	@statics
		local handlertable = {}
	@end
	
	--- Adds a handler to the parser.
	
	- addOption: option withHandler: handler
	do
		handlertable[option] = handler
	end
	
	--- Adds several options with the same handler.
	
	- addOptions: options withHandler: handler
	do
		for _, option in ipairs(options) do
			[self addOption: option withHandler: handler]
		end
	end
	 
	--- Adds a table of handlers to the parser.
	
	- addOptions: options
	do
		for option, handler in pairs(options) do
			[self addOption: option withHandler: handler]
		end
	end
	
	--- Parses a set of command line options.
	---
	--- The options are processed left to right. All option handlers are
	--- executed. The unprocessed arguments are returned.
	
	- parse: args
	do
		local files = {}
		
		local i = 1
		while (i <= #args) do
			local o = args[i]
			local op
			
			if (o:byte(1) == 45) then
				-- This is an option.
				if (o:byte(2) == 45) then
					-- ...with a -- prefix.
					o = o:sub(3)
					local fn = handlertable[o]
					if not fn then
						@throw [[UnrecognisedOptionException alloc]
							initWithOption: ("--"..o)]
					end
					local op = args[i+1]
					i = i + (fn(op) or 0)
				else
					-- ...without a -- prefix.
					local od = o:sub(2, 2)
					local fn = handlertable[od]
					if not fn then
						@throw [[UnrecognisedOptionException alloc]
							initWithOption: ("-"..od)]
					end
					op = o:sub(3)
					if (op == "") then
						op = args[i+1]
						i = i + (fn(op) or 0)
					else
						fn(op)
					end
				end
			else
				files[#files + 1] = o
			end
			
			i = i + 1
		end
		
		return files
	end
@end


--- Thrown by the argument parser on an unrecognised command line option.

@implementation UnrecognisedOptionException : ApplicationException
	--- Initialise instance with a given unrecognised option.
	
	- initWithOption: option
	do
		return [super initWith: ("unrecognised option '"..option.."'")]
	end
@end
